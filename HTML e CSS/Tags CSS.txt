                                           (CSS In-line)

<tag style="color: conteudo de cor ; background : conteudo cor background; font-size:tamanho fonte; "> ||| CSS Inline


                                          (CSS Interno)
 
<head> 
id,class, ou tag dos conteudos {color: conteudo de cor ; 
background : conteudo cor background; 
font-size: tamanho fonte;}
</head>
                                          (CSS 	Externo)

<head> <link rel="stylesheet" href="=nome do arquivo.css"> </head>

(dentro da Pagina do arquivo.css)

id,cass, ou tag dos conteudos{color: conteudo de cor ; 
background : conteudo cor background; 
font-size: tamanho fonte;}


** As vezes é bom colocar algumas @regras no começo do css Externo, pois ele não esta de fato junto com o html
   exemplo é a regra: @charset "UTF-8"; 


** A Sintaxe nos tres metodos de CSS é a mesma, assim os comandos abaixo servem para ambas

@regras são sempre na primeira(as) linha do CSS Interno/Externo


** o Body tem uma Margin natural, coloca-la em 0px para tirar a limitação nas extremidades


** Para Deixar a altura do Body sempre no tamanho da visualização(quando não tiver conteudos nele o suficiente por exemplo) 

configurar:  body{min-height:100vh;}  ||| Assim, faz com que o tamanho Minimo pro Body seja 100vh (viewport height) da visualização do site



                                                   IDENTIFICADORES CSS


tag#nome do id{}     |||  Pega a Id de um Elemento para altelaro individualmete no style Interno ou Externo do CSS

.nome_da_classe{}   ||| Altera CSS de toda uma classe

tag.nome_da_classe{}   ||| Altera CSS apenas da tag que esta com tal Classe

<tag class="nome_classe1 nome_classe2"> conteudo </tag>  ||| Só precisa dar "espaço" dos nomes para por Duas ou mais classes em um mesmo elemento.


tag1, tag2, tag3 {} ||| Mesmas configuraçoes de CSS para diferentes Tags, .Classes , #IDs 


tag:pseudoClasse{} ||| Pseudos Classes são classes que só são ativas suas configuraçoes quando algum estado é ativado

**exemplos tag:hover{} ||| Pseudo Classe "Hover", Suas configuraçoes só são ativadas quando o mouse esta sobre o elemento dela

          tag:active{} ||| Pseudo Classe "Active",Suas configuraçoes só são ativadas quando o elemento dela é clicado
 


tag1 tag2filha{} ||| Configuração apenas para as tags que estão em algum grau de parentesco (filha,neta etc) de uma tag 

tag1 > tag2filha{} ||| Configuração apenas para as tags filhas(aquelas que estão na maior hieraquia dentro da tag pai) de uma tag

** No caso, tag1 é a tag Pai que sustenta  > a tag2 que é a filha

** Exemplo com Hover: tag1:hover > tag2filha {}  ||| Nesse Exemplo, quando o mouse ficasse sobre a Tag1 Mudaria só as Configuraçoes da Tag2 Filha 


tag::pseudoElement{content:"Conteudo";} ||| Pseudo-Elementos, Modificam apenas conteudos dentro da tag (content:; cause sempre usado?)

**exemplo: tag::after{content:"Conteudo";} ||| PsElement After, Só Após todo conteudo dos Elementos da tag, Aplica o Content:""; e suas Configuraçoes

** exemplo2: input::placeholder{configuraçoes CSS} ||| Mexendo no peseudo-elemento Placeholder do input


**Todos os exemplo acima com "tag" podem ser feitos normalmente como #id ou .class (só substituindo a sintaxe de declaração obviamente)





:root{
    --varnome: conteudo;
    --varnome2: conteudo2;              ||| Variaveis do CSS, Armazena Uma propriedade (nome da cor, ou estilo da fonte, tamanho e etc...)
    --varnome3: conteudo3;              ||| Tem que estar dentro do bloco do "root". preferivelmente o mais antes possivel de todo o resto do codigo CSS
}  


color: var(--varnome) ; ||| Utilização do conteudo dessa Variavel em algum lugar


* { Propriedades } ||| Seleção Global, isto é, Configuração de Propriedades de todos os elementos do site de uma vez 



/* */  ||| Comentario em CSS



                                             (Propriedades CSS )


CORES


color: conteudo do nome da cor em ingles;  ||| Cor da letra do conteudo Pelo Nome (em ingles)

color: #0000ff;                            ||| Codigo da Cor em Hexa (Azul nesse caso)

color: rgb(0,0,255);                       ||| Codigo da Cor em RGB (Azul nesse caso)

color: hsl(240,100%,50%);                  ||| Codigo em HSL (luminosidade) (Azul nesse caso)


background-color:conteudo cor;  ||| Cor do fundo do conteudo



background-image: linear-gradient(to direção,cor do começo, cor do final); ||| Degrade De Cores

** opçoes no "to": right, left, top, bottom

** opçoes cor do começo , cor do final: nome cor %numero ||| Aumenta a area da cor 

** Se o Body ficar com Gradiente para o top uo bottom vão ficar estranhos nas configuraões globais puras do css

alterar para:   *{ height:100%;} (No local de codigos de CSS mesmo, SEM ser dentro de uma tag ou etc...)


background-image: radial-gradient(circle,cor do começo, cor do final); ||| Degrade De Cores (Circulado)








POSICIONAMENTO 


margin:auto;    ||| Centraliza Conteudo Horizontalmente Independente do tamanho da tela (elemento tem que ser display:block)


position:absolute;  left:50%; top:50%;  transform: translate(-50%, -50%)  ||| Centraliza Conteudo Verticalmente independente do tamanho da tela

* Elemento Pai tem que ser position:relative;  *
 

text-align:posição; ||| Alinha o Texto Horizontalmente

**parametros de posição: left, right, center, justify

vertical-align: posição; ||| Alinha o Texto Verticalmente

**parametros: top, middle, bottom



text-indent: 15px; ||| Tamanho de Espaçamento no inicio do texto (como aqueles em parágrafos)

line-height: 1.4em; ||| Espaçamento Entre as linhas de um Texto (em um Parágrafo por exemplo)


display:inline-block; ||| Define Elemento como Box In-Line: Não ocupando a Largura inteira

display:block; ||| Define Elemento como Box Level: Ocupando toda a Largura da tela

display:none; ||| Deixa o Elemento SEM Nenhuma Visualização




Flex-Box

display:flex;  ||| Deixa elementos Filhos(dentro) de um elemento Pai como display:Inline ou vice-versa.

*elementos que não tem uma Width definida com o pai display:flex ficam com a menor largura possivel*


** propriedades a seguir só funcionam se o Elemento tambem tiver display:flex;

Configuraçoes No elemento Pai tambem 

justify-content:parametros; ||| Justifica (Horizontalmente) os elementos Filhos desse elemento Pai  

parametro:  space-between | Deixa um espaço de distancia do mesmo tamanho entre os itens

parametro: center | Deixa todos os itens no centro (horizontal)


align-items:parametros; ||| Alinha (Verticalmente) os elemento Filhos desse elemento Pai

parametro: center | Deixa todos os itens no centro (vertical)  


Configuraçoes nos próprios elementos Filhos

flex-basis: 30px; ||| tamanho da Width base 

flex-grow:2;  ||| Tamanho largura por Proporção de itens

* para fazer sentido deve ser aplicada em mais de um item pelo ID deles, com os outros com numero menor, exmp: 1, dai o que é 2 tera o dobro de largura doq os que tem 1

flex-shrink:2; ||| ao contraio do Grow, diminui esse em Proporcionalmente a outros

flex: 1 2 50px ;|||  shorthand dos 3 de cima (1: grow, 2: shrink, 50: basis)

order:1; ||| Define a Ordem que o elemento sera posto com base no numero em relação a outros elementos com um order tmb *nesse caso é o primerio 1*

 **


flex-wrap:wrap; ||| Flex-Wrap, Elementos Filhos de um Elemento Pai são obrigados a irem para baixo quando ultrapassam a largura do seu elemento Pai

*nos filhos de um elemento tipo display:flex, o flex sempre adapta o posicionamento para que caibam todos os itens dentro do seu Pai podendo distorcer,

com o Wrap forçamos a pula de linha em troca da integridade dos tamanhos dos itens* 




  


Padding ||| Espaçamento INTERNO do conteudo (o distanciando de sua própria borda por dentro)

Margin  ||| Espaçamento EXTERNO do conteudo (espaçando para fora depois de sua borda)


padding:10px 10px 10px 10px; ||| Distanciamento em cada lado do Padding  

margin:10px 10px 10px 10px;  ||| Distanciamento em cada lado da Margin

**parametros em ordem: top px, right px, down px, left px 

margin:auto; ||| Centraliza de fato o Elemento horizontalmente (o mesmo precisar ser Display:block;)


height:200px; ||| Altura do Contedo

width:200px; ||| Largura do Conteudo

** Os Valores em % tem como base o tamanho total da exibição, assim são naturalmente mais responsivos 



max-width: 1000px; ||| Valor MAXIMO de largura que esse conteudo pode chegar em px

min-width: 320px; ||| Valor Minimo de largura que esse conteudo pode ficar em px




**ps nas Propriedades a Seguir significa: top,bottom,left,right, que todos utilizam para basear seu posicionamento.


position:relative; top:1px; left:1px;||| Position Relative, Apartir de sua localização original, movimenta sua localização com base nos parametros.

position:absolute; ps ||| Absolute, Deixa a posição do conteudo baseada no site inteiro, para definir sua localização exata com base em todo o site.

** Se O conteudo estiver dentro de outro que tenha alguma Posição Definida, então Fica posição Absoluta baseada no tamanho total desse conteudo Pai


position:fixed; ps ||| Fixed, Deixa o conteudo Fixo na tela não importa o local, então os parametros definem sua posição com base no tamanho total da tela.

position:sticky; ps ||| Sticky, Assim que o conteudo ficar de "fora" da tela, deixa-o fixo com sua posição baseada nos parametros com base no tamanho total da tela.






FORMATO e ESTILO

               border: 3px solid conteudo_de_cor; ||| Bordas do elemento

              outline: 3px solid conteudo_de_cor; ||| Outline do elemento, Fica logo depois da Borda


**parametros de cima: largura px, tipo: solid,dashed,double, groove, Cor    

border-radius: 10px ou 10%; ||| Arredonda Borda do elemento (50% deixa o conteudo literalmente redondo)

border-radius: 20px 20px 40px 50px; ||| Configuração individual para cada lado

parametros: 1top-left 2top-right 3bot-right 4bot-left  

box-shadow:0px 2px 3px nome cor; ||| Sombra na margem do conteudo

box-shadow: inset 1px 1px 1px nome cor; ||| inset, sombra interna do conteudo


text-shadow:1px 2px 3px nome cor ; ||| Sombra em letras

** parametros: 1px: para o lado, 2px: para baixo, 3px: espalhar 



FONTES DE LETRA

font-family: Nome fonte, Nome fonte2, Nome fonte3; ||| Fonte das letras, sendo que a ordem das fontes colocadas vai ser a ordem que o navegador tentara
                                                       exibi-las caso a anterior não for suportada.

** é recomendavel que na ultima tentativa de fonte coloque uma generica da familia para garantir a exibição de qualquer forma
exemplos: sans-serif, serif, monospace, etc...  

** outra dica é que fontes sem serifa (sans) são recomendadas para pequenos textos, ja a com serifa para textos longos, ou algo mais "sério".
                                                       


font-size: medida da fonte; ||| tamanho da letra

**Medidas recomendadas: 
absoluta: 1px (que é baseado no proprio tamanho da letra)

relativa: 1em (baseado no tamanho padrão da letra que de é 16px, ou outro tamanho definido para ela, assim multiplicando para cada numero no em, 
2em seria 32px por exemplo no tamanho base da fonte 16px)

Adaptavel a tela: 5vw (baseado no tamanho total da View Widht - visualização total da largura, assim se ajusta de acordo com a largura da visualização)



font-weight:peso da fonte; ||| peso(negritura) das letras

** valores absolutos: lighter, normal, bold, bolder

**valores em numero entre 100 a 900


font-style: estilo da fonte; ||| Estilo das letras, exemplo Italic


 text-decoration: decoração da fonte; ||| Derocação da letra, exemplo: underline 





font: estilo peso tamanho familia da fonte    (não tem , mesmo)   ||| Simplificação de instruçoes de fonte: style, weight, size, family
exem: italic bold 18px   Arial, Helvetica, sans-serif



@import url('https://fonts.googleapis.com/css2?family=Staatliches&display=swap'); ||| Endereço de fonte externa "Google Fonts" 

*Depois de Importa-la pela @regra com seu URL, pegar as familias dela e colocar nos textos onde for utiliza-la.

*Selecionar todas as variaçoes dela no URL para poder usa-la com todas as propriedades de estilo ou peso


@font-face{                                              |||Incorporação de Fontes Baixadas 
    font-family: "Nome para idenficiação da Fonte";         
    src: url("local da fonte.tipo") format("mesmo do .tipo da url"), url("local da fonte2.tipo") format("mesmo do .tipo da url");
}    

**tipos e fomatos de fontes: .otf (opentype), .ttf (truetype), ??? (embedded-opentype),??? (truetype-att ), ??? (svg)

**exemplo: url(fonte.otf) format(opentype)

** Quando for usar a fonte em tão local, indicar o nome (dado) a ela no font-family do elemento











IMAGENS


Imagens de Background

*Lembrando para definir no body  { height:100vh; }   para Sempre considerar a altura max da visualização *


background-image: url("local_do_arquivo.formato"); ||| Imagem para background do conteudo

background-size: 100px 100px ||| Tamanho de Altura e Largura da imagem no background

background-repeat: propriedade; ||| Tipo de repetiçoes

*propriedades: 1:repeat, repete imagem (padrão) 2: no-repeat, não repete imagem  
3: repeat-y, repete só pra cima 4: repeat-x repete só pro lado *

background-position: propriedades; ||| Posição Base de captura da imagem de background

*propriedades: 1:left top , base lado left em cima (padrao) 2: right bottom, base lado right em baixo
3: left center, base lado left centro 4: center center, base no centro do centro


background-size: propriedades ; ||| Tamanho da Imagem do fundo

*propriedades: 1: auto, (padrão) 2: valor em % ou px 
3:contain, mostra toda a imagem adaptando-a para não cortar nem distorcer

4: cover, Deixa no tamanho Maximo possivel porem cortando partes dela (Dependendo da background-position ) (O Melhor)


background-attachment: parametros ;  ||| Background-Attachment

parametros: 1: scroll, imagem obdece ao rolamento não acompanhando ele? 
2:  fixed, deixa imagem fixa em toda sua area mesmo rolando  (serve pro efeito parallax)



Table configs CSS

table{ border-collapse: collapse} ||| border-collapse, faz tabela integrar as suas linhas 



NÃO ESTUDADO DIREITO:


z-index: -1 ; ||| deixa elemento com prioridade para Sobrepor outro elemento no msm lugar (o elemento tem que ter um position declarada absolute ou relative)




align-items:parametro; ||| Alinha(Verticalmente) Todos os itens dentros de um elemento  


display: flex; justify-content: center;align-items: center; ||| Deixar Elemento dentro da div No MEIO



@media only screen and (max-width: 1300px) {conteudo a ser alterado no css} ||| Se o tamanho da Largura (Width) for menor que 1300px altera os elementos css

(esse sim colocar por ultimo)



-webkit-text-stroke-width: 2px; ||| Contorno De Textos

-webkit-text-stroke-color: #000; ||| Cor do Contorno do Texto

-moz-box-sizing: border-box; ||| contorno em caixa

-webkit-box-sizing: border-box; border: 4px solid red; ||| tamanho e cor do contorno da caixa

overflow: hidden; text-overflow: ellipsis; ||| Se o conteudo passar da area da Div que ele esta dentro ele interrompe com um "..." 







FERRAMENTAS EXTERNAS

CORES:

- Adobe Color

- Paletton

- coolors.co

Ideia Base do Desing do Site

- Mockflow